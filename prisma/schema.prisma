// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  name             String?
  role             Role              @default(USER)
  status           Status            @default(PENDING)
  password         String
  fcmToken         String?
  image            String?
  latitude         Float?
  longitude        Float?
  location         String?
  customerId       String?
  connectAccountId String?
  subscriptionPlan SubscriptionPlan?
  isVerified       Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  receiver         Notifications[]   @relation("receiverDetails")
  sender           Notifications[]   @relation("senderDetails")
  Review           Review[]
  SubscriptionUser SubscriptionUser?
  // chat relations
  chatsSent        Chat[]            @relation("SenderRelation")
  chatsReceived    Chat[]            @relation("ReceiverRelation")
  roomsSent        Room[]            @relation("SenderRelation")
  roomsReceived    Room[]            @relation("ReceiverRelation")

  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@index([isVerified])
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([expiry])
  @@map("otps")
}

model Service {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Review      Review[]
  Booking     Booking[]

  @@index([createdAt])
  @@index([price])
}

model Booking {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  serviceId      String      @db.ObjectId
  date           DateTime
  description    String
  location       String
  latitude       Float?
  longitude      Float?
  isPaid         Boolean     @default(false)
  paymentId      String?     @db.ObjectId
  serviceDetails Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  paymentDetails Payment?    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([userId])
  @@index([serviceId])
  @@index([status])
  @@index([createdAt])
  @@index([date])
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  serviceId      String   @db.ObjectId
  rating         Float
  comment        String?
  serviceDetails Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  userDetails    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([serviceId])
  @@index([rating])
}

model Payment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  amount        Float
  paymentId     String?
  paymentMethod String?
  serviceId     String    @unique @db.ObjectId
  // bookDetails Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Booking       Booking[]
}

model Subscription {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  stripeProductId  String
  stripePriceId    String
  price            Float
  description      String
  currency         String
  interval         String?
  status           Status            @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  SubscriptionUser SubscriptionUser?
}

model SubscriptionUser {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  userId             String       @unique @db.ObjectId
  subscriptionPlanId String       @unique @db.ObjectId // E.g., "basic", "premium", etc.
  subscriptionId     String // Stripe subscription ID
  subscriptionStatus String // E.g., "active", "canceled", "incomplete"
  subscriptionStart  DateTime // When the subscription started
  subscriptionEnd    DateTime // When it ends (for trial or cancel)
  userDetails        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlan   Subscription @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id])
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id])
}

enum Role {
  USER
  WORKER
  ADMIN
  SUPER_ADMIN
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  message    String
  roomId     String   @db.ObjectId
  images     String[]
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("chats")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  chat       Chat[]

  @@map("rooms")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum SubscriptionPlan {
  BASIC
  PRO
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
}
